/* 
This code is from YouTube creator Ania Kub√≥w 
"Rotating Planets in JUST CSS!!! Simple Tutorial" 
https://www.youtube.com/watch?v=6M-rZIukXy0&t=9s 
*/
/* 2022-10-22 And I actually understand most (but not all) of it. */

/* comments from YouTube
nohjrd
1 month ago
The transform property values (scale, translate,  rotate etc) can now
 be applied directly as properties on a class.  Can be a little easier 
 as you don't have to worry about one transform invalidating another one.
---
Christian Schubert
1 month ago
Yeah, that's what I was about to suggest. I also think the perspective 
property could've made things a whole lot simpler
*/

body {
  margin: 0;
  padding: 0;
  background-color: rgb(33, 33, 33);
  /* color the starfield black */
}

.master-container {
  display: flex;
  justify-content: center;
  align-items: center;
  /* background-color: rgb(33, 33, 33); */
  height: 100vh; /*-- this gives display something to center on */
  /* body will always be in center of viewport */

}


div.credit {
  position: fixed;
  bottom: 0;
  right: 0;
  width: 350px;
  border: 3px solid rgb(253, 253, 253);
  font-size: small;
  color: rgb(253, 253, 253);
}


.sun {
  height: 150px;
  width: 150px;
  border-radius: 50%; /* sun is a circle */
  background-color: rgb(248, 244, 163);
  box-shadow: 0 0 60px rgb(253, 203, 163), 0 0 98px rgb(184, 160, 26);
  /* box-shadow forms the sun's corona */
  transform: scaleX(0.2);
  position: absolute;
  /* position: absolute puts the sun in the center of the route element */
}


/* .planets-container is the axis on which we rotate the planets */
/* Note the s in .planets-container, don't confuse with .planet-container */
.planets-container {
    width: 150px;
    height: 150px;
    border-radius: 50%;   /* creates circle */
    transform: scaleX(5); /* changes circle to ellipse on x axis */
    position: absolute;
    /* I'm still not sure what position: absolute is necessary */
    /* An element with position: absolute; is positioned relative to the */
    /* nearest positioned ancestor (instead of positioned relative to the 
    /* viewport, like fixed). */
    /* However; if an absolute positioned element has no positioned ancestors, */
    /* it uses the document body, and moves along with page scrolling. */
    /* Note: Absolute positioned elements are removed from the normal flow, */
    /* and can overlap elements.*/
}

#second-planet-container {
  left: 85px;
  /* move away from first planet */
}

#third-planet-container {
  left: 42.5px;
  top: 100px;
  /* move away from second planet */
}

.planet-index {
  width: 100%;
  height: 100%;
  position: absolute;
}

.planet {
  height: 60px;
  width: 60px;
  border-radius: 50%; /* planet is a circle */
  transform: scaleX(0.2);  /* make a circle by undoing scaleX(5) in .planets-container */
  /* because planet <div> element is inside planet-container <div> element */
  position: absolute;
}

/* planet-after is the smaller circle inside the planet circle shape */
/* This is how we dynamically shade the night side of the planet  */
.planet:after {
  content: '';
  position: absolute;
  inset: 0; /* inset: 10px smaller circle */
  border-radius: 50%;
}


/* route <div> is the route (the orbit) planet goes around the sun */
/* this is the first animation (rotate) */
/*  
  planets-container > 
    route > 
      planet 
*/
/* .route gets same height (100%) and width (100%) as planet-container */
/* The <div class=route> is rotating and the planets are its child elements,
so they get rotated also. */

/* Problem: the planets are skewed into ellipses, so... */
/* Then we add another wrapper "planet-container" so that the */
/* planets appear as a circle again, by correcting the "rotate" animation */
/* with the "correct" animation. 
/* So we have: 
  planets-container > 
    route ("rotate" animation) > 
      planet-container ("correct" animation) > 
        planet 
*/
.route {
  width: 100%;
  height: 100%;
  animation: rotate 12s infinite linear;
  position: absolute;
  /* add position: absolute so that the planets are all orbiting in the same plane */
}

/* planet-container makes the skewed planets into circles again */
.planet-container {
  height: 60px;
  width: 60px;
  /* same size as the planet */
  animation: correct 12s infinite linear;
  position: absolute;
}


/* We create a wrapper "planet-index" */
/* planet-index runs the animation that does two things:
/* 1. To hide the planets as they go behind the sun, animation changes the z-index + or - */
/* 2. To vary the size of the planets as they orbit, animation uses transform() */

/* We have these elements:

  planets-container > 
    planet-index ("hideFirstPlanet" animation, change z-index and transform) > 
      route ("rotate" animation) > 
        planet-container ("correct" animation) > 
          planet 
*/

#first-planet-index {
  animation: hideFirstPlanet 12s infinite;
}

#second-planet-index {
  animation: hideSecondPlanet 12s infinite;
}

#third-planet-index {
  animation: hideThirdPlanet 12s infinite;
}

#first-planet {
  animation: firstPlanetRender 12s infinite linear; 
}
/*background-color: rgb(86, 86, 253);*/ /* she commented this out at about 40:22 */
/*background: linear-gradient( -90deg, rgb(86, 86, 253) 50%, rgb(60, 60, 175) 50%);*/

#first-planet:after {
  background-color: rgb(37, 37, 141);
  animation: firstPlanetRenderRotator 12s infinite linear;
}

#second-planet {
  animation: secondPlanetRender 12s infinite linear;
}

#second-planet:after {
  background-color: rgb(65, 128, 65);
  animation: secondPlanetRenderRotator 12s infinite linear; 
}

#third-planet {
  animation: thirdPlanetRender 12s infinite linear;
}

#third-planet:after {
  background-color: darkred;
  animation: thirdPlanetRenderRotator 12s infinite linear; 
}

/* 
planet:after and firstPlanetRender is how we
dynamically shade the night side of the planet  
At different percentages of the animation, we change the background color
background linear-gradient() parameters:
* direction (length or percentage), default is 180 deg
* color stop 1
* color stop 2
To create a hard line between two colors, creating a stripe 
instead of a gradual transition, adjacent color stops can be set 
to the same location.
*/ 
@keyframes firstPlanetRender {
  0% {
    background: linear-gradient( -90deg, rgb(86, 86, 253) 50%, rgb(60, 60, 175) 50%);
  }
  12% {
    background: linear-gradient( -90deg, rgb(86, 86, 253) 50%, rgb(60, 60, 175) 50%);
  }
  12.1% {
    background: linear-gradient( 90deg, rgb(86, 86, 253) 50%, rgb(60, 60, 175) 50%);
  }
  62% {
    background: linear-gradient( 90deg, rgb(86, 86, 253) 50%, rgb(60, 60, 175) 50%);
  }
  62.1% {
    background: linear-gradient( -90deg, rgb(86, 86, 253) 50%, rgb(60, 60, 175) 50%);
  }
  100% {
    background: linear-gradient( -90deg, rgb(86, 86, 253) 50%, rgb(60, 60, 175) 50%);
  }
}


@keyframes firstPlanetRenderRotator {
  0% {transform: scaleX(-0.2); background-color: rgb(86, 86, 253);}

  12% {transform: scaleX(-1); background-color: rgb(86, 86, 253);}
  12.1% {transform: scaleX(1); background-color: rgb(86, 86, 253);}
  
  37% {transform: scaleX(0); background-color: rgb(86, 86, 253);}
  37.1% {transform: scaleX(0); background-color: rgb(60, 60, 175);}
  
  62% {transform: scaleX(-1); background-color: rgb(60, 60, 175);}
  62.1% {transform: scaleX(1); background-color: rgb(60, 60, 175);}
  
  87% {transform: scaleX(0); background-color: rgb(60, 60, 175);}
  87.1% {transform: scaleX(0); background-color: rgb(86, 86, 253);}

  100% {transform: scaleX(-0.2); background-color: rgb(86, 86, 253);}
}
/* scaleX() 1 and -1 full circle, flip at 12%, 62%, 0 disappear at 37% and 87% */

@keyframes secondPlanetRender {
  0% {
    background: linear-gradient( 90deg, rgb(95, 185, 95) 50%, rgb(65, 128, 65) 50%);
  }
  40% {
    background: linear-gradient( 90deg, rgb(95, 185, 95) 50%, rgb(65, 128, 65) 50%);
  }
  40.1% {
    background: linear-gradient( -90deg, rgb(95, 185, 95) 50%, rgb(65, 128, 65) 50%);
  }
  90% {
    background: linear-gradient( -90deg, rgb(95, 185, 95) 50%, rgb(65, 128, 65) 50%);
  }
  90.1% {
    background: linear-gradient( 90deg, rgb(95, 185, 95) 50%, rgb(65, 128, 65) 50%);
  }
  100% {
    background: linear-gradient( 90deg, rgb(95, 185, 95) 50%, rgb(65, 128, 65) 50%);
  }
}
/* flip at 40.1% to 90% */

@keyframes secondPlanetRenderRotator {
  0% {transform: scaleX(0.55); background-color: rgb(95, 185, 95);}

  15% {transform: scaleX(0); background-color: rgb(95, 185, 95);}
  15.1% {transform: scaleX(0); background-color: rgb(65, 128, 65);}

  40% {transform: scaleX(-1); background-color: rgb(65, 128, 65);}
  40.1% {transform: scaleX(1); background-color: rgb(65, 128, 65);}

  65% {transform: scaleX(0); background-color: rgb(65, 128, 65);}    
  65.1% {transform: scaleX(0); background-color: rgb(95, 185, 95);}  

  90% {transform: scaleX(-1); background-color: rgb(95, 185, 95);}  
  90.1% {transform: scaleX(1); background-color: rgb(95, 185, 95);}

  100% {transform: scaleX(0.55); background-color: rgb(95, 185, 95);}
}
/* scaleX() 1 and -1 = full circle (flip between -1 and 1), flip at 40% and 90%, scaleX(0) disappear at 15% and 65% */

@keyframes thirdPlanetRender {
  0% {
    background: linear-gradient( -90deg, rgb(255, 66, 113) 50%, rgb(168, 47, 77) 50%);
  }
  49% {
    background: linear-gradient( -90deg, rgb(255, 66, 113) 50%, rgb(168, 47, 77) 50%);
  }
  49.1% {
    background: linear-gradient( 90deg, rgb(255, 66, 113) 50%, rgb(168, 47, 77) 50%);
  }
  99% {
    background: linear-gradient( 90deg, rgb(255, 66, 113) 50%, rgb(168, 47, 77) 50%);
  }
  99.1% {
    background: linear-gradient( -90deg, rgb(255, 66, 113) 50%, rgb(168, 47, 77) 50%);
  }
  100% {
    background: linear-gradient( -90deg, rgb(255, 66, 113) 50%, rgb(168, 47, 77) 50%);
  }
}

@keyframes thirdPlanetRenderRotator {
  0% {transform: scaleX(0.77); background-color: rgb(168, 47, 77);}

  25% {transform: scaleX(0); background-color: rgb(168, 47, 77);}
  25.1% {transform: scaleX(0); background-color: rgb(255, 66, 113);}

  49% {transform: scaleX(-1); background-color: rgb(255, 66, 113);}
  49.1% {transform: scaleX(1); background-color: rgb(255, 66, 113);}
  75% {transform: scaleX(0); background-color: rgb(255, 66, 113);}
  75.1% {transform: scaleX(0); background-color: rgb(168, 47, 77);}

  99% {transform: scaleX(-1); background-color: rgb(168, 47, 77);}
  99.1% {transform: scaleX(1); background-color: rgb(168, 47, 77);}

  100% {transform: scaleX(0.77); background-color: rgb(168, 47, 77);}
}

@keyframes rotate {
  0% {
    transform: rotateZ(0deg);
  }
  100% {
    transform: rotateZ(360deg);
  }
}
/*
The amount of rotation created by rotateZ() is specified by an <angle>. 
If positive, the movement will be clockwise; if negative, it will be counter-clockwise. 
*/


@keyframes correct {
  0% {
    transform: rotateZ(360deg);
  }
  100% {
    transform: rotateZ(0deg);
  }
}

@keyframes hideFirstPlanet {
  0% {
    z-index: 999;  /* in front of sun */
    transform: scale(0.9); /* vary size of planet in orbit */
  }
  25% {
    z-index: -999; /* behind sun */
    transform: scale(0.8);
  }
  50% {
    transform: scale(0.9);
  }
  75% {
    transform: scale(1.1);
  }
  100% {
    z-index: 999; /* in front of sun */
    transform: scale(0.9);
  }
}

@keyframes hideSecondPlanet {
  0% {
    z-index: -999;
    transform: scale(0.95);
  }
  50% {
    z-index: 999;
    transform: scale(1.1);
  }
   90% {
    transform: scale(0.9);
  }
  100% {
    z-index: -999;
    transform: scale(0.95);
  }
}

@keyframes hideThirdPlanet {
  0% {
    z-index: 999;
    transform: scale(1.1);
  }
  50% {
    z-index: -999;
    transform: scale(0.8);
  }
  100% {
    z-index: 999;
    transform: scale(1.1);
  }
}